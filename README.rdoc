= micromidi

A Ruby DSL for MIDI

{pic}[http://images.treetrouble.net/images/midi.png]

== Features
 
* Cross-platform compatible using MRI or JRuby.
* Simplified MIDI message output
* MIDI Thru, processing and custom input events
* Optional shorthand for {live coding}[http://en.wikipedia.org/wiki/Live_coding]

== Installation

  gem install micromidi
  
== Requirements

Ruby 1.9.2+ or JRuby in 1.9 mode

Requires {midi-eye}[http://github.com/arirusso/midi-eye], {midi-message}[http://github.com/arirusso/midi-message] and {unimidi}[http://github.com/arirusso/unimidi].  These should install automatically with the gem.

== Usage

The following are basic examples that use {unimidi}[http://github.com/arirusso/unimidi] inputs and outputs.  ({see an example here that explains selecting an output...}[http://github.com/arirusso/unimidi/blob/master/examples/select_a_device.rb])

  require "micromidi"
  
  @i = UniMIDI::Input.use(:first)
  @o = UniMIDI::Output.use(:first)

This example plays some arpeggios

  MIDI.using($o) do
    
    5.times do |oct|
      octave oct
      %w{C E G B}.each { |n| play n 0.5 }
    end

  end
    
While running, this next example sends all input directly to the output except for notes; notes that are received are only sent to the output if their octave is between 1 and 3.  Output is also printed to the console by passing in <em>$stdout</em>.

  MIDI.using(@i, @o, $stdout) do

    thru_except :note { |msg| only(msg, :octave, (1..3)) }

    join

  end

This is the same example redone using shorthand aliases

  M(@i, @o) do

    te :n { |m| bpf(m, :oct, (1..3)) }

    j

  end
  
Finally, here is an example that converts some control change messages to sysex
  
  MIDI.using(@i, @o) do
  
    *@cc_to_sysex_map =
      [0x40, 0x7F, 0x00],
      [0x41, 0x7F, 0x00],
      [0x42, 0x7F, 0x00]
  
    node 0x41, 0x42, :device_id => 0x10
  
    receive :cc do |message|
    
      sysex_command @cc_to_sysex_map[message.index], message.value
      
    end
  
  end 

I've written up a few posts explaining each of the concepts used here in greater detail:

* {Output}[http://tx81z.blogspot.com/2011/08/micromidi-midi-messages-and-output.html]
* {MIDI Thru and Processing}[http://tx81z.blogspot.com/2011/08/micromidi-midi-thru-and-midi-processing.html]
* {Binding Custom Input Events}[http://tx81z.blogspot.com/2011/08/micromidi-custom-events.html]
* {Shorthand aliases}[http://tx81z.blogspot.com/2011/08/micromidi-shorthand.html]
 
== Documentation

* {rdoc}[http://rubydoc.info/github/arirusso/micromidi] 

== Author

* {Ari Russo}[http://github.com/arirusso] <ari.russo at gmail.com>

== License

Apache 2.0, See the file LICENSE

Copyright (c) 2011 Ari Russo